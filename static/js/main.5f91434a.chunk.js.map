{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","funFact","A11yComponent","_useState","useState","_useState2","Object","slicedToArray","element1Open","setElement1Open","react_default","a","createElement","className","aria-controls","aria-expanded","onClick","x","id","aria-labelledby","role","hidden","NonA11yComponent","_useState3","_useState4","App","href","target","rel","src","logo","onSubmit","e","value","elements","myField","alert","concat","name","App_A11yComponent","App_NonA11yComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mNCIlCC,SACJ,+NAEIC,EAAgB,WAAM,IAAAC,EACcC,oBAAS,GADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnBK,EADmBH,EAAA,GACLI,EADKJ,EAAA,GAG1B,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEE,gBAAc,UACdC,gBAAeP,EACfK,UAAU,kBACVG,QAAS,kBAAMP,EAAgB,SAAAQ,GAAC,OAAKA,KACrCC,GAAG,WALL,gBAUFR,EAAAC,EAAAC,cAAA,OACEO,kBAAgB,UAChBD,GAAG,UACHE,KAAK,SACLC,QAASb,GAERP,KAMHqB,EAAmB,WAAM,IAAAC,EACWnB,oBAAS,GADpBoB,EAAAlB,OAAAC,EAAA,EAAAD,CAAAiB,EAAA,GACtBf,EADsBgB,EAAA,GACRf,EADQe,EAAA,GAG7B,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBG,QAAS,kBAAMP,EAAgB,SAAAQ,GAAC,OAAKA,MAAtE,eAGAP,EAAAC,EAAAC,cAAA,OAAKS,QAASb,GAAeP,KAoFpBwB,MA/Ef,WACE,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,gDACAF,EAAAC,EAAAC,cAAA,yLAKAF,EAAAC,EAAAC,cAAA,wCAC+B,IAC7BF,EAAAC,EAAAC,cAAA,KACEc,KAAK,iFACLC,OAAO,SACPC,IAAI,uBAHN,wBAMK,IARP,+BAS+B,IAC7BlB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,uBAEFH,EAAAC,EAAAC,cAAA,8GAIAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKiB,IAAKC,IAAMjB,UAAU,aAC1BH,EAAAC,EAAAC,cAAA,QACEmB,SAAU,SAAAC,GAAK,IACLC,EAAUD,EAAEL,OAAOO,SAASC,QAA5BF,MACRG,MAAK,kBAAAC,OAAmBJ,MAG1BvB,EAAAC,EAAAC,cAAA,SAAO0B,KAAK,YACZ5B,EAAAC,EAAAC,cAAA,0BAGJF,EAAAC,EAAAC,cAAA,kEACAF,EAAAC,EAAAC,cAAA,oHAIAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACZH,EAAAC,EAAAC,cAAA,2DACAF,EAAAC,EAAAC,cAAA,mKAKAF,EAAAC,EAAAC,cAAA,2FAIAF,EAAAC,EAAAC,cAAA,yGAIAF,EAAAC,EAAAC,cAAA,oFAKFF,EAAAC,EAAAC,cAAA,0PAMAF,EAAAC,EAAAC,cAAC2B,EAAD,MACA7B,EAAAC,EAAAC,cAAC4B,EAAD,UC5GUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5f91434a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst funFact =\n  \"Your dog is as smart as a two-year old! Ever wonder why children around this age seem to have a special bond with the family dog? It could be because they speak the same language, roughly 250 words and gestures in fact.\";\n\nconst A11yComponent = () => {\n  const [element1Open, setElement1Open] = useState(false);\n\n  return (\n    <div className=\"buttonRow\">\n      <h3>\n        <button\n          aria-controls=\"region1\"\n          aria-expanded={element1Open}\n          className=\"doggoFactButton\"\n          onClick={() => setElement1Open(x => !x)}\n          id=\"button1\"\n        >\n          Doggo Fact!\n        </button>\n      </h3>\n      <div\n        aria-labelledby=\"button1\"\n        id=\"region1\"\n        role=\"region\"\n        hidden={!element1Open}\n      >\n        {funFact}\n      </div>\n    </div>\n  );\n};\n\nconst NonA11yComponent = () => {\n  const [element1Open, setElement1Open] = useState(false);\n\n  return (\n    <div className=\"buttonRow\">\n      <div className=\"doggoFactButton\" onClick={() => setElement1Open(x => !x)}>\n        Doggo Fact!\n      </div>\n      <div hidden={!element1Open}>{funFact}</div>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main className=\"main\">\n        <div className=\"content\">\n          <h1>a11y web workshop</h1>\n          <h2>Step 1: Run an accessibility audit</h2>\n          <p>\n            One of first things you should do and periodically check as you\n            develop an accessible website is use a an accessibility audit tool\n            to check for common and obvious mistakes.\n          </p>\n          <p>\n            We recommend downloading the{\" \"}\n            <a\n              href=\"https://chrome.google.com/webstore/detail/axe/lhdoppojpmngadmnindnejefpokejbdd\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              axe chrome extension\n            </a>{\" \"}\n            and running it on this page.{\" \"}\n            <span className=\"white\">Poor contrast text</span>\n          </p>\n          <p>\n            Use the highlight feature in the extension to quickly visually\n            identify the problematic elements.\n          </p>\n          <div className=\"row\">\n            <img src={logo} className=\"App-logo\" />\n            <form\n              onSubmit={e => {\n                const { value } = e.target.elements.myField;\n                alert(`form submitted ${value}`);\n              }}\n            >\n              <input name=\"myField\" />\n              <button>Submit</button>\n            </form>\n          </div>\n          <h2>Step 2: Run through the website using a screenreader</h2>\n          <p>\n            The best way to ensure that your site is accessible is to go through\n            your website using a screenreader.\n          </p>\n          <ol className=\"list\">\n            <li>If you have headphones available, put them on</li>\n            <li>\n              Next turn on the VoiceOver screen reader by going to System\n              Preferences > Accessibility > VoiceOver and the clicking the\n              \"Enable VoiceOver\" checkbox.\n            </li>\n            <li>\n              Navigate into the web content by pressing Control-Option-Shift and\n              down arrow\n            </li>\n            <li>\n              Navigate through each web element by pressing Control-Option and\n              either left or right arrow\n            </li>\n            <li>\n              To click on an element, press Control-Option-Space when focused on\n              it\n            </li>\n          </ol>\n          <p>\n            Compare and contrast the following two web elements which are\n            visually identical and work functionally the same using a mouse.\n            However, one of them is not screen reader friendly. Can you identify\n            the inaccessible element and explain why?\n          </p>\n          <A11yComponent />\n          <NonA11yComponent />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}